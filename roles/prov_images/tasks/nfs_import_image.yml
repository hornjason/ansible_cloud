---
- name: Installing nfs client
  yum: name=nfs-utils state=present
  tags:
    - import
  with_items: "{{ images }}"
  when: item.protocol == "nfs"

- name: Ensuring rpcbind is running
  service: name=rpcbind state=started enabled=yes
  tags:
    - import
  with_items: "{{ images }}"
  when: item.protocol == "nfs"

- name: "Ensuring {{ item.nfs_mount_point }} directory exists"
  file: path={{ item.nfs_mount_point }} state=directory
  tags:
    - import
  with_items: "{{ images }}"
  when: item.protocol == "nfs"

- name: Mounting {{ item.source }} --> {{ nfs_mount_point }}
  mount: name={{ item.nfs_mount_point }} src={{ item.source }} fstype=nfs opts="rw,sync,nfsvers=3" state=mounted
  tags:
    - import
  with_items: "{{ images }}"
  when: item.protocol == "nfs"

#- name: Determining application image location
#  shell: echo "{{ item.name }}" | sed -n -e 's/^\([[:alpha:]].*\)-.*$/\1/p'
#  register: app_result
#  tags:
#    - import
#  with_items: "{{ images }}"
#  when: item.protocol == "nfs"
#
#- debug: var=item.stdout
#  with_items: "{{ app_result.results }}"
#  when: item.item.protocol == "nfs"
#
#- name: Set facts for app to anything
#  set_fact: app=item.stdout
#  when: item.item.protocol == "nfs"
#  with_items: "{{ app_result.results }}"
#
#- name: Set facts for app to IDIH
#  set_fact: app='IDIH'
#  when:
#    - 'item.stdout == "oracle" or item.stdout == "mediation" or item.stdout == "apps"'
#    #- 'app_result.stdout == "oracle" or app_result.stdout == "mediation" or app_result.stdout == "apps"'
#    - item.item.protocol == "nfs"
#  with_items: "{{ app_result.results }}"
#
#- name: Determining application release
#  shell: echo "{{ item.name }}" | sed -n -e 's/^[[:alpha:]].*-\([[:digit:]]\.[[:digit:]]\).*$/\1/p'
#  register: app_release_result
#  tags:
#    - import
#  with_items: "{{ images }}"
#  when: item.protocol == "nfs"
#
#- set_fact: app_release={{ app_release_result.stdout }}
#  tags:
#    - import
#  when: item.protocol == "nfs"

- name: Checking existence of directory "{{ item.image_dir }}/{{ item.application }}/{{ item.application_release }}"
  file: path={{ item.image_dir }}/{{ item.application }}/{{ item.application_release }} mode=0755 state=directory
  tags:
    - import
  with_items: "{{ images }}"

- name: Checking existence of the file "{{ item.image_dir }}/{{ item.application }}/{{ item.application_release }}/{{ item.name }}"
  stat: path={{ item.image_dir }}/{{ item.application }}/{{ item.application_release }}/{{ item.name }}
  register: ova
  tags:
    - import
  with_items: "{{ images }}"
  when: item.protocol == "nfs"

- name: Copying "{{ item.name }}" to "{{ item.image_dir }}/{{ item.application }}/{{ item.application_release }}/"
  copy:
    force=no
    src="{{ item.nfs_mount_point }}/TPD/prod/{{ item.application }}/{{ item.application_release }}/ova/{{ item.name }}"
    dest="{{ item.image_dir }}/{{ item.application }}/{{ item.application_release }}/"
  register: cp_ova
  tags:
    - import
  with_items: "{{ images }}"
  when:
    #- ova.stat.isreg != True
    - item.protocol == "nfs"

- name: Unmounting {{ item.source }} --> {{ nfs_mount_point }}
  run_once: true
  mount: name={{ item.nfs_mount_point }} src={{ item.source }} fstype=nfs state=unmounted
  tags:
    - import
  with_items: "{{ images }}"
  when: item.protocol == "nfs"

- name: Unpacking "{{ image_dir }}/{{ item.application }}/{{ item.application_release }}/*.{{ item.disk_format }}"
  shell: "cd {{ item.image_dir }}/{{ item.application }}/{{ item.application_release }}/; tar -xvf  {{ item.name }}"
  register: vmdk_unpack
  tags:
    - import
  with_items: "{{ images }}"
  when:
    - item.protocol == "nfs"

- name: Registering {{ item.disk_format }} filename
  shell: "tar -tf {{ item.image_dir }}/{{ item.application }}/{{ item.application_release }}/{{ item.name }} | grep {{ item.disk_format }}"
  register: vmdk
  tags:
    - import
  with_items: "{{ images }}"
  when: item.protocol == "nfs"

- name: Glancing NFS based images
  os_image:
    cloud: cloud-admin
    state: "{{ state | default('present') }}"
    name: "{{ item.1.stdout }}"
    disk_format: "{{ item.0.disk_format }}"
    container_format: "{{ item.0.container_format }}"
    is_public: yes
    filename: "{{item.0.image_dir  }}/{{item.0.application }}/{{ item.0.application_release }}/{{ item.1.stdout }}"
  tags:
    - import
  when: item.0.protocol == "nfs"
  with_together:
    - "{{ images }}"
    - "{{ vmdk.results }}"

## HTTP based images
- name: Retrieving image from URL
  get_url: url={{ item.source }} dest={{ item.image_dir }}/{{ item.application }}/{{ item.application_release }}/{{ item.name }}
  with_items: "{{ images }}"
  when: item.protocol == "http"
  tags:
    - jbb

- name: Glancing HTTP based images
  os_image:
    cloud: cloud-admin
    state: "{{ state | default('present') }}"
    name: "{{ item.name }}"
    disk_format: "{{ item.disk_format }}"
    container_format: "{{ item.container_format }}"
    is_public: yes
    filename: "{{item.image_dir  }}/{{item.application }}/{{ item.application_release }}/{{ item.name }}"
  tags:
    - import
    - jbb
  when: item.protocol == "http"
  with_items: "{{ images }}"
